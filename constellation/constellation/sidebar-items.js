initSidebarItems({"constant":[["WARNINGS_BUFFER_SIZE","The number of warnings to include in each crash report."]],"enum":[["ExitPipelineMode","When we are exiting a pipeline, we can either force exiting or not. A normal exit waits for the compositor to update its state before exiting, and delegates layout exit to script. A forced exit does not notify the compositor, and exits layout without involving script."],["ReadyToSave","When we are running reftests, we save an image to compare against a reference. This enum gives the possible states of preparing such an image."]],"fn":[["log_entry","Rust uses `LogRecord` for storing logging, but servo converts that to a `LogEntry`. We do this so that we can record panics as well as log messages, and because `LogRecord` does not implement serde (de)serialization, so cannot be used over an IPC channel."],["reg_host","The registered domain name (aka eTLD+1) for a URL. Returns None if the URL has no host name. Returns the registered suffix for the host name if it is a domain. Leaves the host name alone if it is an IP address."]],"struct":[["Constellation","The `Constellation` itself. In the servo browser, there is one constellation, which maintains all of the browser global data. In embedded applications, there may be more than one constellation, which are independent of each other."],["Frame","A frame in the frame tree. Each frame is the constrellation's view of a browsing context. Each browsing context has a session history, caused by navigation and traversing the history. Each frame has its current entry, plus past and future entries. The past is sorted chronologically, the future is sorted reverse chronoogically: in partiucular prev.pop() is the latest past entry, and next.pop() is the earliest future entry."],["FrameChange","Represents a pending change in the frame tree, that will be applied once the new pipeline has loaded and completed initial layout / paint."],["FrameState","An entry in a frame's session history. Each entry stores the pipeline id for a document in the session history. When we operate on the joint session history, entries are sorted chronologically, so we timestamp the entries by when the entry was added to the session history."],["FrameTreeIterator","An iterator over a frame tree, returning the fully active frames in depth-first order. Note that this iterator only returns the fully active frames, that is ones where every ancestor frame is in the currently active pipeline of its parent frame."],["FromCompositorLogger","A logger directed at the constellation from the compositor"],["FromScriptLogger","The constellation uses logging to perform crash reporting. The constellation receives all `warn!`, `error!` and `panic!` messages, and generates a crash report when it receives a panic. A logger directed at the constellation from content processes"],["FullFrameTreeIterator","An iterator over a frame tree, returning all frames in depth-first order. Note that this iterator returns all frames, not just the fully active ones."],["InitialConstellationState","State needed to construct a constellation."],["WebDriverData","Data needed for webdriver"]]});