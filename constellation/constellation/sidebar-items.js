initSidebarItems({"constant":[["WARNINGS_BUFFER_SIZE","The number of warnings to include in each crash report."]],"enum":[["ExitPipelineMode","When we are exiting a pipeline, we can either force exiting or not. A normal exit waits for the compositor to update its state before exiting, and delegates layout exit to script. A forced exit does not notify the compositor, and exits layout without involving script."],["ReadyToSave","When we are running reftests, we save an image to compare against a reference. This enum gives the possible states of preparing such an image."]],"fn":[["log_entry","Rust uses `LogRecord` for storing logging, but servo converts that to a `LogEntry`. We do this so that we can record panics as well as log messages, and because `LogRecord` does not implement serde (de)serialization, so cannot be used over an IPC channel."]],"struct":[["Constellation","The `Constellation` itself. In the servo browser, there is one constellation, which maintains all of the browser global data. In embedded applications, there may be more than one constellation, which are independent of each other."],["FromCompositorLogger","A logger directed at the constellation from the compositor"],["FromScriptLogger","The constellation uses logging to perform crash reporting. The constellation receives all `warn!`, `error!` and `panic!` messages, and generates a crash report when it receives a panic. A logger directed at the constellation from content processes"],["InitialConstellationState","State needed to construct a constellation."],["WebDriverData","Data needed for webdriver"]]});