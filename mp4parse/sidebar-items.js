initSidebarItems({"constant":[["BUF_SIZE_LIMIT",""]],"enum":[["AudioCodecSpecific",""],["CodecType",""],["Error","Describes parser failures."],["SampleEntry",""],["TimeOffsetVersion",""],["TrackType",""],["VideoCodecSpecific",""]],"fn":[["be_i16",""],["be_i32",""],["be_i64",""],["be_u16",""],["be_u24",""],["be_u32",""],["be_u64",""],["find_descriptor",""],["get_debug_mode",""],["parse_mdhd",""],["parse_mvhd",""],["read_audio_sample_entry","Parse an audio description inside an stsd box."],["read_box_header","Read and parse a box header."],["read_buf","Read size bytes into a Vector or return error."],["read_co64","Parse a co64 box."],["read_ctts",""],["read_dc_descriptor",""],["read_dfla","Parse `FLACSpecificBox`."],["read_dops","Parse `OpusSpecificBox`."],["read_ds_descriptor",""],["read_edts",""],["read_elst","Parse a elst box."],["read_es_descriptor",""],["read_esds",""],["read_fixed_length_pascal_string",""],["read_flac_metadata",""],["read_frma",""],["read_ftyp","Parse an ftyp box."],["read_fullbox_extra","Parse the extra header fields for a full box."],["read_hdlr","Parse a hdlr box."],["read_mdhd","Parse a mdhd box."],["read_mdia",""],["read_mehd",""],["read_minf",""],["read_moov",""],["read_mp4","Read the contents of a box, including sub boxes."],["read_mvex",""],["read_mvhd","Parse an mvhd box."],["read_null_terminated_string",""],["read_pascal_string",""],["read_pssh",""],["read_qt_wave_atom",""],["read_schi",""],["read_sinf",""],["read_stbl",""],["read_stco","Parse a stco box."],["read_stsc","Parse a stsc box."],["read_stsd","Parse a stsd box."],["read_stss","Parse a stss box."],["read_stsz","Parse a stsz box."],["read_stts","Parse a stts box."],["read_surround_channel_count",""],["read_tenc",""],["read_tkhd","Parse a tkhd box."],["read_trak",""],["read_video_sample_entry","Parse an video description inside an stsd box."],["read_vpcc","Parse a VPx Config Box."],["serialize_opus_header","Re-serialize the Opus codec-specific config data as an `OpusHead` packet."],["set_debug_mode",""],["skip","Skip a number of bytes that we don't care to parse."],["skip_box_content","Skip over the entire contents of a box."],["skip_box_remain","Skip over the remain data of a box."],["write_be_u32",""]],"mod":[["boxes",""]],"static":[["DEBUG_MODE",""]],"struct":[["AudioSampleEntry",""],["BMFFBox",""],["BoxHeader","Basic ISO box structure."],["BoxIter",""],["ChannelMappingTable",""],["ChunkOffsetBox",""],["CompositionOffsetBox",""],["ES_Descriptor",""],["Edit",""],["EditListBox","Edit list box 'elst'"],["EmptySampleTableBoxes","A fragmented file contains no sample data in stts, stsc, and stco."],["FLACMetadataBlock",""],["FLACSpecificBox","Represet a FLACSpecificBox 'dfLa'"],["FileTypeBox","File type box 'ftyp'."],["HandlerBox",""],["MediaContext","Internal data structures."],["MediaHeaderBox","Media header box 'mdhd'"],["MediaScaledTime","A time to be scaled by the media's global (mvhd) timescale."],["MediaTimeScale","The media's global (mvhd) timescale in units per second."],["MovieExtendsBox",""],["MovieHeaderBox","Movie header box 'mvhd'."],["OpusSpecificBox","Represent an OpusSpecificBox 'dOps'"],["ProtectionSchemeInfoBox",""],["ProtectionSystemSpecificHeaderBox",""],["Sample",""],["SampleDescriptionBox",""],["SampleSizeBox",""],["SampleToChunk",""],["SampleToChunkBox",""],["SyncSampleBox",""],["TimeOffset",""],["TimeToSampleBox",""],["Track",""],["TrackEncryptionBox",""],["TrackHeaderBox","Track header box 'tkhd'"],["TrackScaledTime","A time to be scaled by the track's local (mdhd) timescale. Members are time in scale units and the track id."],["TrackTimeScale","The track's local (mdhd) timescale. Members are timescale units per second and the track id."],["VPxConfigBox","Represent a Video Partition Codec Configuration 'vpcC' box (aka vp9)."],["VideoSampleEntry",""]],"type":[["ByteData",""],["Result","Result shorthand using our Error enum."]]});