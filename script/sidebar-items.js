initSidebarItems({"fn":[["init",""],["init_service_workers",""],["perform_platform_specific_initialization",""]],"macro":[["make_atomic_setter",""],["make_bool_getter",""],["make_bool_setter",""],["make_dimension_setter",""],["make_enumerated_getter",""],["make_getter",""],["make_int_getter",""],["make_int_setter",""],["make_legacy_color_setter",""],["make_limited_int_setter",""],["make_limited_uint_setter",""],["make_nonzero_dimension_setter",""],["make_setter",""],["make_string_or_document_url_getter",""],["make_uint_getter",""],["make_uint_setter",""],["make_url_getter",""],["make_url_or_base_getter",""],["make_url_setter",""],["rooted_vec",""]],"mod":[["body",""],["clipboard_provider",""],["devtools",""],["document_loader","Tracking of pending loads in a document. https://html.spec.whatwg.org/multipage/#the-end"],["dom","The implementation of the DOM."],["fetch",""],["layout_wrapper","A safe wrapper for DOM nodes that prevents layout from mutating the DOM, from letting DOM nodes escape, and from generally doing anything that it isn't supposed to. This is accomplished via a simple whitelist of allowed operations, along with some lifetime magic to prevent nodes from escaping."],["mem","Routines for handling measuring the memory usage of arbitrary DOM nodes."],["network_listener",""],["origin",""],["script_runtime","The script runtime contains common traits and structs commonly used by the script thread, the dom, and the worker threads."],["script_thread","The script thread is the thread that owns the DOM in memory, runs JavaScript, and spawns parsing and layout threads. It's in charge of processing events for all same-origin pages in a frame tree, and manages the entire lifetime of pages in the frame tree from initial request to teardown."],["serviceworker_manager","The service worker manager persists the descriptor of any registered service workers. It also stores an active workers map, which holds descriptors of running service workers. If an active service worker timeouts, then it removes the descriptor entry from its active_workers map"],["task_source",""],["textinput","Common handling of keyboard input and state management for text input controls"],["timers",""],["unpremultiplytable",""],["webdriver_handlers",""]]});