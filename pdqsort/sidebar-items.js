initSidebarItems({"fn":[["break_patterns","Scatters some elements around in an attempt to break patterns that might cause imbalanced partitions in quicksort."],["choose_pivot","Chooses a pivot in `v` and returns it's index. Some elements might be shuffled while doing so."],["heapsort","Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case."],["insert_head","Inserts `v[0]` into pre-sorted sequence `v[1..]` so that whole `v[..]` becomes sorted, and returns `true` if the sequence was modified."],["insertion_sort","Sorts `v` using insertion sort, which is `O(n^2)` worst-case."],["is_presorted","Checks whether `v` is already sorted (either in ascending or descending order) and attempts to make it ascending in very few steps. Finally, returns `true` if `v` is sorted in ascending order."],["partial_insertion_sort","Attempts to sort `v` using insertion sort in just a handful of steps, i.e. in `O(n)` time. Returns `true` if the slice was successfully sorted."],["partition","Partitions `v` into elements smaller than `v[pivot]`, followed by elements greater than or equal to `v[pivot]`."],["partition_equal","Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`. It is assumed that `v` does not contain elements smaller than `v[pivot]`."],["partition_in_blocks","Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal to `pivot`. Returns the number of elements smaller than `pivot`."],["quicksort","Sorts `v` recursively using quicksort."],["sort","Sorts a slice."],["sort_by","Sorts a slice using `compare` to compare elements."],["sort_by_key","Sorts a slice using `f` to extract a key to compare elements by."]]});