initSidebarItems({"fn":[["break_patterns","Scatters some elements around in an attempt to break patterns that might cause imbalanced partitions in quicksort."],["choose_pivot","Chooses a pivot in `v` and returns it's index."],["heapsort","Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case."],["insertion_sort","Sorts a slice using insertion sort, which is `O(n^2)` worst-case."],["partition","Partitions `v` into elements smaller than `v[pivot]`, followed by elements greater than or equal to `v[pivot]`."],["partition_equal","Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`. It is assumed that `v` does not contain elements smaller than `v[pivot]`."],["partition_in_blocks","Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal to `pivot`. Returns the number of elements smaller than `pivot`."],["quicksort","Sorts `v` using quicksort."],["recurse","Sorts `v` recursively."],["sort","Sorts a slice."],["sort_by","Sorts a slice using `compare` to compare elements."],["sort_by_key","Sorts a slice using `f` to extract a key to compare elements by."]],"struct":[["WriteOnDrop","When dropped, takes the value out of `Option` and writes it into `dest`."]]});