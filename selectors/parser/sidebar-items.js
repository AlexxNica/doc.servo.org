initSidebarItems({"constant":[["MAX_10BIT",""]],"enum":[["CaseSensitivity",""],["Combinator",""],["NamespaceConstraint",""],["SimpleSelector",""],["SimpleSelectorParseResult",""]],"fn":[["affects_sibling",""],["attr_selector_to_css",""],["complex_selector_specificity",""],["display_to_css_identifier","Serialize the output of Display as a CSS identifier"],["matches_non_common_style_affecting_attribute",""],["parse_attribute_flags",""],["parse_attribute_selector",""],["parse_author_origin_selector_list_from_str",""],["parse_complex_selector",""],["parse_complex_selector_and_pseudo_element",""],["parse_compound_selector","simple_selector_sequence : [ type_selector | universal ] [ HASH | class | attrib | pseudo | negation ]* | [ HASH | class | attrib | pseudo | negation ]+"],["parse_functional_pseudo_class",""],["parse_negation","Level 3: Parse **one** simple_selector.  (Though we might insert a second implied \"<defaultns>|*\" type selector.)"],["parse_nth_pseudo_class",""],["parse_one_simple_selector","Parse a simple selector other than a type selector."],["parse_qualified_name","`Err(())`: Invalid selector, abort * `Ok(None)`: Not a simple selector, could be something else. `input` was not consumed. * `Ok(Some((namespace, local_name)))`: `None` for the local name means a `*` universal selector\n"],["parse_selector","Build up a Selector. selector : simple_selector_sequence [ combinator simple_selector_sequence ]* ;"],["parse_selector_list","Parse a comma-separated list of Selectors. aka Selector Group in http://www.w3.org/TR/css3-selectors/#grouping"],["parse_simple_pseudo_class",""],["parse_type_selector","`Err(())`: Invalid selector, abort * `Ok(None)`: Not a type selector, could be something else. `input` was not consumed. * `Ok(Some(vec))`: Length 0 (`*|*`), 1 (`*|E` or `ns|*`) or 2 (`|E` or `ns|E`)\n"],["specificity",""]],"struct":[["AttrSelector",""],["ComplexSelector",""],["LocalName",""],["Namespace","FIXME(SimonSapin): should Hash only hash the URL? What is it used for?"],["ParserContext",""],["Selector",""],["Specificity",""]],"trait":[["FromCowStr","Although it could, String does not implement From<Cow<str>>"],["MaybeHeapSizeOf","An empty trait that requires `HeapSizeOf` if the `heap_size` Cargo feature is enabled."],["SelectorImpl","This trait allows to define the parser implementation in regards of pseudo-classes/elements"]]});