(function() {var implementors = {};
implementors["serde"] = ["impl&lt;K,&nbsp;V,&nbsp;S&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='primitive' href='std/primitive.tuple.html'>(</a>K, V<a class='primitive' href='std/primitive.tuple.html'>)</a>&gt; for <a class='struct' href='std/collections/hash/map/struct.HashMap.html' title='std::collections::hash::map::HashMap'>HashMap</a>&lt;K,&nbsp;V,&nbsp;S&gt; <span class='where'>where K: <a class='trait' href='serde/core/cmp/trait.Eq.html' title='serde::core::cmp::Eq'>Eq</a> + <a class='trait' href='serde/core/hash/trait.Hash.html' title='serde::core::hash::Hash'>Hash</a>, S: <a class='trait' href='serde/core/hash/trait.BuildHasher.html' title='serde::core::hash::BuildHasher'>BuildHasher</a> + <a class='trait' href='core/default/trait.Default.html' title='core::default::Default'>Default</a></span>","impl&lt;T,&nbsp;S&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='struct' href='std/collections/hash/set/struct.HashSet.html' title='std::collections::hash::set::HashSet'>HashSet</a>&lt;T,&nbsp;S&gt; <span class='where'>where S: <a class='trait' href='serde/core/hash/trait.BuildHasher.html' title='serde::core::hash::BuildHasher'>BuildHasher</a> + <a class='trait' href='core/default/trait.Default.html' title='core::default::Default'>Default</a>, T: <a class='trait' href='serde/core/cmp/trait.Eq.html' title='serde::core::cmp::Eq'>Eq</a> + <a class='trait' href='serde/core/hash/trait.Hash.html' title='serde::core::hash::Hash'>Hash</a></span>","impl&lt;P&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;P&gt; for <a class='struct' href='std/path/struct.PathBuf.html' title='std::path::PathBuf'>PathBuf</a> <span class='where'>where P: <a class='trait' href='core/convert/trait.AsRef.html' title='core::convert::AsRef'>AsRef</a>&lt;<a class='struct' href='std/path/struct.Path.html' title='std::path::Path'>Path</a>&gt;</span>","impl&lt;T&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='struct' href='collections/binary_heap/struct.BinaryHeap.html' title='collections::binary_heap::BinaryHeap'>BinaryHeap</a>&lt;T&gt; <span class='where'>where T: <a class='trait' href='serde/core/cmp/trait.Ord.html' title='serde::core::cmp::Ord'>Ord</a></span>","impl&lt;K,&nbsp;V&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='primitive' href='std/primitive.tuple.html'>(</a>K, V<a class='primitive' href='std/primitive.tuple.html'>)</a>&gt; for <a class='struct' href='collections/btree/map/struct.BTreeMap.html' title='collections::btree::map::BTreeMap'>BTreeMap</a>&lt;K,&nbsp;V&gt; <span class='where'>where K: <a class='trait' href='serde/core/cmp/trait.Ord.html' title='serde::core::cmp::Ord'>Ord</a></span>","impl&lt;T&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='struct' href='collections/btree/set/struct.BTreeSet.html' title='collections::btree::set::BTreeSet'>BTreeSet</a>&lt;T&gt; <span class='where'>where T: <a class='trait' href='serde/core/cmp/trait.Ord.html' title='serde::core::cmp::Ord'>Ord</a></span>","impl&lt;E&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;E&gt; for <a class='struct' href='collections/enum_set/struct.EnumSet.html' title='collections::enum_set::EnumSet'>EnumSet</a>&lt;E&gt; <span class='where'>where E: <a class='trait' href='collections/enum_set/trait.CLike.html' title='collections::enum_set::CLike'>CLike</a></span>","impl&lt;T&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='struct' href='collections/linked_list/struct.LinkedList.html' title='collections::linked_list::LinkedList'>LinkedList</a>&lt;T&gt;","impl <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='primitive' href='std/primitive.char.html'>char</a>&gt; for <a class='struct' href='collections/string/struct.String.html' title='collections::string::String'>String</a>","impl&lt;'a&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;&amp;'a <a class='primitive' href='std/primitive.str.html'>str</a>&gt; for <a class='struct' href='collections/string/struct.String.html' title='collections::string::String'>String</a>","impl <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='struct' href='collections/string/struct.String.html' title='collections::string::String'>String</a>&gt; for <a class='struct' href='collections/string/struct.String.html' title='collections::string::String'>String</a>","impl&lt;'a&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='primitive' href='std/primitive.char.html'>char</a>&gt; for <a class='enum' href='collections/borrow/enum.Cow.html' title='collections::borrow::Cow'>Cow</a>&lt;'a,&nbsp;<a class='primitive' href='std/primitive.str.html'>str</a>&gt;","impl&lt;'a,&nbsp;'b&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;&amp;'b <a class='primitive' href='std/primitive.str.html'>str</a>&gt; for <a class='enum' href='collections/borrow/enum.Cow.html' title='collections::borrow::Cow'>Cow</a>&lt;'a,&nbsp;<a class='primitive' href='std/primitive.str.html'>str</a>&gt;","impl&lt;'a&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;<a class='struct' href='collections/string/struct.String.html' title='collections::string::String'>String</a>&gt; for <a class='enum' href='collections/borrow/enum.Cow.html' title='collections::borrow::Cow'>Cow</a>&lt;'a,&nbsp;<a class='primitive' href='std/primitive.str.html'>str</a>&gt;","impl&lt;T&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='struct' href='collections/vec/struct.Vec.html' title='collections::vec::Vec'>Vec</a>&lt;T&gt;","impl&lt;'a,&nbsp;T&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;T&gt; for <a class='enum' href='collections/borrow/enum.Cow.html' title='collections::borrow::Cow'>Cow</a>&lt;'a,&nbsp;<a class='primitive' href='std/primitive.slice.html'>[</a>T<a class='primitive' href='std/primitive.slice.html'>]</a>&gt; <span class='where'>where T: <a class='trait' href='core/clone/trait.Clone.html' title='core::clone::Clone'>Clone</a></span>","impl&lt;A&gt; <a class='trait' href='serde/core/iter/trait.FromIterator.html' title='serde::core::iter::FromIterator'>FromIterator</a>&lt;A&gt; for <a class='struct' href='collections/vec_deque/struct.VecDeque.html' title='collections::vec_deque::VecDeque'>VecDeque</a>&lt;A&gt;",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
